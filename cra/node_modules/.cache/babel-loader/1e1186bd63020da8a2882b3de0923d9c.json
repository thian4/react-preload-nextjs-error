{"ast":null,"code":"import ImageCache from './ImageCache';\n\nconst reflect = p => p.then(v => ({\n  v,\n  status: 'fulfilled'\n}), e => ({\n  e,\n  status: 'rejected'\n}));\n\nconst ImageHelper = {\n  loadImage(url, options) {\n    const image = ImageCache.get(url, options);\n    return new Promise((resolve, reject) => {\n      const handleSuccess = () => {\n        resolve(image);\n      };\n\n      const handleError = () => {\n        reject(new Error(\"failed to preload \".concat(url)));\n      };\n\n      if (image.complete) {\n        // image is loaded, go ahead and change the state\n        if (image.naturalWidth && image.naturalHeight) {\n          // successful load\n          handleSuccess();\n        } else {\n          // IE CACHED IMAGES RACE CONDITION\n          // -------------------------------\n          // IE11 sometimes reports cached images as image.complete,\n          // but naturalWidth and naturalHeight = 0.\n          // A few ms later it will get the dimensions correct,\n          // so check a few times before rejecting it.\n          let counter = 1;\n          const checkDimensions = setInterval(() => {\n            if (image.naturalWidth && image.naturalHeight) {\n              window.clearInterval(checkDimensions);\n              handleSuccess();\n            }\n\n            if (counter === 3) {\n              window.clearInterval(checkDimensions);\n              handleError();\n            }\n\n            counter += 1;\n          }, 50);\n        }\n      } else {\n        image.addEventListener('load', handleSuccess, false);\n        image.addEventListener('error', handleError, false);\n      }\n    });\n  },\n\n  loadImages(urls, options) {\n    const promises = urls.map(url => reflect(this.loadImage(url, options)));\n    return Promise.all(promises).then(promises => {\n      return promises.map(p => {\n        if (p.status !== 'fulfilled') {\n          throw new Exception('One or more images failed to load');\n        }\n\n        return p;\n      });\n    });\n  },\n\n  // preload without caring about the result\n  stuffImages(urls, options) {\n    ImageCache.stuff(urls, options);\n  }\n\n};\nexport default ImageHelper;","map":null,"metadata":{},"sourceType":"module"}